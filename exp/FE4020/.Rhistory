personaA=c(5.4,5.2,5,5.2,5.5,5.3,5.4,5.2,5.1,5.3,5.3,4.9,5.4,5.2,5.2,5.3,5.2)
personaB=c(5.08,5.10,5.09,5.08,5.09,5.10,5.13,5.12,5.11,5.09,5.06,5.09,5.13,5.11,5.10,5.12,5.10,5.07,5.05,5.11,5.08,5.10)
MediaA=mean(personaA)
MedianaA=median(personaA)
library(modeest)
ModaA=mlv(personaA,method="mfv")
install.packages("modeest")
MediaA=mean(personaA)
MedianaA=median(personaA)
library(modeest)
ModaA=mlv(personaA,method="mfv")
mediaA
MediaA
boxplot(personaA)
t.test?
t?
t?
;)
help(prp.test)
help(prop.test)
est =prop.test (x = 95, n = 160, p = 0.5, correct = FALSE, alternative = "two.sided")
est
est$p.value
####
##valor de Z para alpha = 0.01
qnorm (p = .05, lower.tail = TRUE)
####
##valor de Z para alpha = 0.01
qnorm (p = .05, lower.tail = FALSE)
HELP(QNORM)
help(qnorm)
####
##valor de Z para alpha = 0.01
qnorm (p = .5, lower.tail = FALSE)
p.valor=1-pnorm(0.5)
p.valor
pnorm(0.5)
personaA=c(5.4,5.2,5,5.2,5.5,5.3,5.4,5.2,5.1,5.3,5.3,4.9,5.4,5.2,5.2,5.3,5.2)
personaB=c(5.08,5.10,5.09,5.08,5.09,5.10,5.13,5.12,5.11,5.09,5.06,5.09,5.13,5.11,5.10,5.12,5.10,5.07,5.05,5.11,5.08,5.10)
personaA=c(5.4,5.2,5,5.2,5.5,5.3,5.4,5.2,5.1,5.3,5.3,4.9,5.4,5.2,5.2,5.3,5.2)
personaB=c(5.08,5.10,5.09,5.08,5.09,5.10,5.13,5.12,5.11,5.09,5.06,5.09,5.13,5.11,5.10,5.12,5.10,5.07,5.05,5.11,5.08,5.10)
summary(personaA)
summary(personaB)
count(personaA)
boxplot(personaA,personaB)
boxplot(personaA,personaB,col=c("cyan","green"),xlab="Especies", ylab=" Largo de petalos")
boxplot(personaA,personaB,names=c("personaA","personaB"),col=c("cyan","green"),xlab="Especies", ylab=" Largo de petalos")
boxplot(personaA,personaB,names=c("personaA","personaB"),col=c("cyan","green"),xlab="muestras", ylab="glóbulos rojos en sangre")
library(aplpack)
lines(density(personaA),col="magenta",lwd=2,lty=5)
hist(personaA,probability=TRUE,col="cyan",xlab="PersonaA",main="",breaks=5)
lines(density(personaA),col="magenta",lwd=2,lty=5)
hist(personaB,probability=TRUE,col="green",xlab="PersonaB",main="",breaks=5)
lines(density(personaB),col="blue",lwd=2,lty=5)
hist(personaA,probability=TRUE,col="cyan",xlab="PersonaA",main="",breaks=5)
lines(density(personaA),col="magenta",lwd=2,lty=5)
hist(personaB,probability=TRUE,col="green",xlab="PersonaB",main="",breaks=5)
lines(density(personaB),col="blue",lwd=2,lty=5)
qqnorm(personaA, pch = 1, frame = FALSE)  # sorts my data and mathces it to a Normal
qqline(personaA, col = "steelblue", lwd = 2) #prints the line
qqnorm(personaB, pch = 1, frame = FALSE)  # sorts my data and mathces it to a Normal
qqline(personaB, col = "steelblue", lwd = 2) #prints the line
help(qqnorm)
qqnorm(personaA, pch = 1, frame = FALSE, main = "Normal Q-Q Plot- personaA")  # sorts my data and mathces it to a Normal
qqline(personaA, col = "steelblue", lwd = 2) #prints the line
qqnorm(personaB, pch = 1, frame = FALSE, main = "Normal Q-Q Plot- personaB")  # sorts my data and mathces it to a Normal
qqline(personaB, col = "steelblue", lwd = 2) #prints the line
shapiro.test(personaA)   # gets the W and the P value,
shapiro.test(personaB)   # gets the W and the P value, en este caso el P value es apenas mayor que 0.1 justito podrias decir que es normal
t.test(personaB,mu=5,var.equal=FALSE,alternative="two.sided")
# los resultados obtenidos.
#
# Las variables son las siguientes, todas ellas est´an en el intervalo [0, 100]:
# a) Fertility: es una medida de la fertilidad del suelo del cant´on (cuanto m´as cerca de 100, mayor fertilidad y cuanto m´as cerca de 0, menor fertilidad).
# b) Agriculture: porcentaje de hombres trabajando en agricultura.
# c) Examination: porcentaje de reclutas que reciben la calificaci´on m´as alta en un
# examen del ej´ercito.
# d) Education: porcentaje de reclutas con estudios superiores a primaria.
# e) Catholic: porcentajede cat´olicos.
# f ) Infant Mortality: porcentaje de nacidos que viven menos de 1 a˜no de vida.
rm(list=ls())
data(swiss)
names(swiss)
library(ggplot2)
library(dplyr)
library("RColorBrewer")                            # Load RColorBrewer
cor(swiss)
plot(swiss,main = "Scatterplots de todas las variales", col="blue")
med_swiss = colMeans(swiss)
cov_swiss = cov(swiss)
dism_swiss= mahalanobis(swiss,med_swiss,cov_swiss)
dism_swiss[1:6]
length(dism_swiss)
dism_swiss>6
points(swiss[dism_swiss>6,],pch="x",col="red")
n = 5000
#n<-10
mu = c(0,0)
sigma = matrix(c(1,0.8,0.8,1),2)
datos = mvrnorm(n,mu,sigma)
library(MASS) #para generar datos con distribución normal multivariada
datos = mvrnorm(n,mu,sigma)
View(datos)
plot(datos, pch=".")
plot(swiss$Fertility,main = "Fertility ", col="blue")
points(swiss[dism_swiss>6,2],pch="x",col="red")
points(swiss[dism_swiss>6,Fertility],pch="x",col="red")
plot(swiss$Fertility,main = "Fertility ", col="blue")
points(swiss[dism_swiss>6,Fertility],pch="x",col="red")
points(swiss[dism_swiss>6]$Fertility,pch="x",col="red")
names(swiss)
plot(swiss$Fertility,main = "Fertility ", col="blue")
points(swiss[dism_swiss>6,1],pch="x",col="red")
plot(swiss$Fertility,main = "Fertility ", col="blue")
pairs(swiss, panel = panel.smooth, main = "swiss data", col = 3 + (swiss$Catholic > 50))
pairs(swiss, panel = panel.smooth, main = "Conjunto de datos swiss")
pairs(swiss, panel = panel.smooth, main = "Conjunto de datos swiss", col = 3 )
pairs(swiss, panel = panel.smooth, main = "Conjunto de datos swiss", col = 3)
pairs(swiss,  main = "Conjunto de datos swiss", col = 3)
pairs(swiss, panel = panel.smooth, main = "Conjunto de datos swiss", col = 3)
dism_swiss= mahalanobis(swiss,med_swiss,cov_swiss)
dism_swiss
summary(dism_swiss)
hist(dism_swiss)
hist(dism_swiss, probability = TRUE, main = "Distancias de mahalanobis")
hist(dism_swiss, probability = TRUE, main = "Distancias de mahalanobis", col = "lightgreen")
hist(dism_swiss, probability = FALSE, main = "Distancias de mahalanobis", col = "lightgreen")
hist(dism_swiss, probability = TRUE, main = "Distancias de mahalanobis", col = "lightgreen")
ggplot(data = dism_swiss,
aes( x = dism_swiss)) +
geom_boxplot(alpha = 0.5,        # Transparencia
outlier.colour = 2) +
ggtitle("Distancias de mahalanobis")+
theme_minimal()   +
theme(legend.position="none")
boxplot(dism_swiss,main="Distancias de mahalanobis", color='blue')
boxplot(dism_swiss,main="Distancias de mahalanobis", col = ='blue')
boxplot(dism_swiss,main="Distancias de mahalanobis", col = "blue")
boxplot(dism_swiss,main="Distancias de mahalanobis", col = "lightgreen")
swiss[dism_swiss>10]
swiss[dism_swiss>10,1]
swiss[dism_swiss>10,0]
swiss[dism_swiss>10]
swiss[dism_swiss>10.1]
swiss[dism_swiss>10,1]
swiss[dism_swiss>10,0]
swiss[dism_swiss>10,1]
dism_swiss>10
dism_swiss(1,dism_swiss>10)
dism_swiss[1]
dism_swiss>10
dism_swiss[dism_swiss>10]
dism_swiss[dism_swiss>11]
A=matrix (c(2,3,3,6), nrwow=2)
A=matrix (c(2,3,3,6), nrow=2)
A=matrix (c(2,3,3,6), nrow=2)
A
t(A)
aut<- eigen(A)
aut
A%-% aut$vectors
A%*% aut$vectors
install.packages( "data.table", dependencies= TRUE )
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ',
'devtools', 'uuid', 'digest'))
install.packages('IRkernel')
library( "IRkernel" )
IRkernel::installspec()
source("~/_Mineriadatos/labo/src/xgboost/nd571_xgboost_histograma.r")
source("~/_Mineriadatos/labo/src/xgboost/nd571_xgboost_histograma.r")
source("~/_Mineriadatos/labo/src/xgboost/nd571_xgboost_histograma.r")
source("~/_Mineriadatos/labo/src/xgboost/nd571_xgboost_histograma.r")
source("~/_Mineriadatos/labo/src/xgboost/nd571_xgboost_histograma.r")
source("~/_Mineriadatos/labo/src/FeatureEngineering/nd402_FE_simple.r")
source("~/_Mineriadatos/labo/src/FeatureEngineering/nd402_FE_simple.r")
source("~/_Mineriadatos/labo/src/FeatureEngineering/nd402_FE_simple.r")
source("~/_Mineriadatos/labo/src/FeatureEngineering/nd402_FE_simple.r")
source("~/_Mineriadatos/labo/src/FeatureEngineering/nd402_FE_simple.r")
