pnorm(0.5)
personaA=c(5.4,5.2,5,5.2,5.5,5.3,5.4,5.2,5.1,5.3,5.3,4.9,5.4,5.2,5.2,5.3,5.2)
personaB=c(5.08,5.10,5.09,5.08,5.09,5.10,5.13,5.12,5.11,5.09,5.06,5.09,5.13,5.11,5.10,5.12,5.10,5.07,5.05,5.11,5.08,5.10)
personaA=c(5.4,5.2,5,5.2,5.5,5.3,5.4,5.2,5.1,5.3,5.3,4.9,5.4,5.2,5.2,5.3,5.2)
personaB=c(5.08,5.10,5.09,5.08,5.09,5.10,5.13,5.12,5.11,5.09,5.06,5.09,5.13,5.11,5.10,5.12,5.10,5.07,5.05,5.11,5.08,5.10)
summary(personaA)
summary(personaB)
count(personaA)
boxplot(personaA,personaB)
boxplot(personaA,personaB,col=c("cyan","green"),xlab="Especies", ylab=" Largo de petalos")
boxplot(personaA,personaB,names=c("personaA","personaB"),col=c("cyan","green"),xlab="Especies", ylab=" Largo de petalos")
boxplot(personaA,personaB,names=c("personaA","personaB"),col=c("cyan","green"),xlab="muestras", ylab="glóbulos rojos en sangre")
library(aplpack)
lines(density(personaA),col="magenta",lwd=2,lty=5)
hist(personaA,probability=TRUE,col="cyan",xlab="PersonaA",main="",breaks=5)
lines(density(personaA),col="magenta",lwd=2,lty=5)
hist(personaB,probability=TRUE,col="green",xlab="PersonaB",main="",breaks=5)
lines(density(personaB),col="blue",lwd=2,lty=5)
hist(personaA,probability=TRUE,col="cyan",xlab="PersonaA",main="",breaks=5)
lines(density(personaA),col="magenta",lwd=2,lty=5)
hist(personaB,probability=TRUE,col="green",xlab="PersonaB",main="",breaks=5)
lines(density(personaB),col="blue",lwd=2,lty=5)
qqnorm(personaA, pch = 1, frame = FALSE)  # sorts my data and mathces it to a Normal
qqline(personaA, col = "steelblue", lwd = 2) #prints the line
qqnorm(personaB, pch = 1, frame = FALSE)  # sorts my data and mathces it to a Normal
qqline(personaB, col = "steelblue", lwd = 2) #prints the line
help(qqnorm)
qqnorm(personaA, pch = 1, frame = FALSE, main = "Normal Q-Q Plot- personaA")  # sorts my data and mathces it to a Normal
qqline(personaA, col = "steelblue", lwd = 2) #prints the line
qqnorm(personaB, pch = 1, frame = FALSE, main = "Normal Q-Q Plot- personaB")  # sorts my data and mathces it to a Normal
qqline(personaB, col = "steelblue", lwd = 2) #prints the line
shapiro.test(personaA)   # gets the W and the P value,
shapiro.test(personaB)   # gets the W and the P value, en este caso el P value es apenas mayor que 0.1 justito podrias decir que es normal
t.test(personaB,mu=5,var.equal=FALSE,alternative="two.sided")
# los resultados obtenidos.
#
# Las variables son las siguientes, todas ellas est´an en el intervalo [0, 100]:
# a) Fertility: es una medida de la fertilidad del suelo del cant´on (cuanto m´as cerca de 100, mayor fertilidad y cuanto m´as cerca de 0, menor fertilidad).
# b) Agriculture: porcentaje de hombres trabajando en agricultura.
# c) Examination: porcentaje de reclutas que reciben la calificaci´on m´as alta en un
# examen del ej´ercito.
# d) Education: porcentaje de reclutas con estudios superiores a primaria.
# e) Catholic: porcentajede cat´olicos.
# f ) Infant Mortality: porcentaje de nacidos que viven menos de 1 a˜no de vida.
rm(list=ls())
data(swiss)
names(swiss)
library(ggplot2)
library(dplyr)
library("RColorBrewer")                            # Load RColorBrewer
cor(swiss)
plot(swiss,main = "Scatterplots de todas las variales", col="blue")
med_swiss = colMeans(swiss)
cov_swiss = cov(swiss)
dism_swiss= mahalanobis(swiss,med_swiss,cov_swiss)
dism_swiss[1:6]
length(dism_swiss)
dism_swiss>6
points(swiss[dism_swiss>6,],pch="x",col="red")
n = 5000
#n<-10
mu = c(0,0)
sigma = matrix(c(1,0.8,0.8,1),2)
datos = mvrnorm(n,mu,sigma)
library(MASS) #para generar datos con distribución normal multivariada
datos = mvrnorm(n,mu,sigma)
View(datos)
plot(datos, pch=".")
plot(swiss$Fertility,main = "Fertility ", col="blue")
points(swiss[dism_swiss>6,2],pch="x",col="red")
points(swiss[dism_swiss>6,Fertility],pch="x",col="red")
plot(swiss$Fertility,main = "Fertility ", col="blue")
points(swiss[dism_swiss>6,Fertility],pch="x",col="red")
points(swiss[dism_swiss>6]$Fertility,pch="x",col="red")
names(swiss)
plot(swiss$Fertility,main = "Fertility ", col="blue")
points(swiss[dism_swiss>6,1],pch="x",col="red")
plot(swiss$Fertility,main = "Fertility ", col="blue")
pairs(swiss, panel = panel.smooth, main = "swiss data", col = 3 + (swiss$Catholic > 50))
pairs(swiss, panel = panel.smooth, main = "Conjunto de datos swiss")
pairs(swiss, panel = panel.smooth, main = "Conjunto de datos swiss", col = 3 )
pairs(swiss, panel = panel.smooth, main = "Conjunto de datos swiss", col = 3)
pairs(swiss,  main = "Conjunto de datos swiss", col = 3)
pairs(swiss, panel = panel.smooth, main = "Conjunto de datos swiss", col = 3)
dism_swiss= mahalanobis(swiss,med_swiss,cov_swiss)
dism_swiss
summary(dism_swiss)
hist(dism_swiss)
hist(dism_swiss, probability = TRUE, main = "Distancias de mahalanobis")
hist(dism_swiss, probability = TRUE, main = "Distancias de mahalanobis", col = "lightgreen")
hist(dism_swiss, probability = FALSE, main = "Distancias de mahalanobis", col = "lightgreen")
hist(dism_swiss, probability = TRUE, main = "Distancias de mahalanobis", col = "lightgreen")
ggplot(data = dism_swiss,
aes( x = dism_swiss)) +
geom_boxplot(alpha = 0.5,        # Transparencia
outlier.colour = 2) +
ggtitle("Distancias de mahalanobis")+
theme_minimal()   +
theme(legend.position="none")
boxplot(dism_swiss,main="Distancias de mahalanobis", color='blue')
boxplot(dism_swiss,main="Distancias de mahalanobis", col = ='blue')
boxplot(dism_swiss,main="Distancias de mahalanobis", col = "blue")
boxplot(dism_swiss,main="Distancias de mahalanobis", col = "lightgreen")
swiss[dism_swiss>10]
swiss[dism_swiss>10,1]
swiss[dism_swiss>10,0]
swiss[dism_swiss>10]
swiss[dism_swiss>10.1]
swiss[dism_swiss>10,1]
swiss[dism_swiss>10,0]
swiss[dism_swiss>10,1]
dism_swiss>10
dism_swiss(1,dism_swiss>10)
dism_swiss[1]
dism_swiss>10
dism_swiss[dism_swiss>10]
dism_swiss[dism_swiss>11]
A=matrix (c(2,3,3,6), nrwow=2)
A=matrix (c(2,3,3,6), nrow=2)
A=matrix (c(2,3,3,6), nrow=2)
A
t(A)
aut<- eigen(A)
aut
A%-% aut$vectors
A%*% aut$vectors
install.packages( "data.table", dependencies= TRUE )
install.packages(c('repr', 'IRdisplay', 'evaluate', 'crayon', 'pbdZMQ',
'devtools', 'uuid', 'digest'))
install.packages('IRkernel')
library( "IRkernel" )
IRkernel::installspec()
#Feature Engineering
#creo nuevas variables dentro del mismo mes
#este script se muestra como esqueleto para que los alumnos agreguen sus propias variables
#ya sea basados en la teoria economica  o en el salvaje empiricismo
# "No es que la nueva variable creada, que funciona, no tenga sentido, lo que sucede es que yo estoy siendo capaz de encontrarselo en este momento"
#limpio la memoria
rm( list=ls() )
gc()
require("data.table")
EnriquecerDataset  <- function( dataset , arch_destino )
{
#INICIO de la seccion donde se deben hacer cambios con variables nuevas
#creo un ctr_quarter que tenga en cuenta cuando los clientes hace 3 menos meses que estan
dataset[  , ctrx_quarter_normalizado := ctrx_quarter ]
dataset[ cliente_antiguedad== 1 , ctrx_quarter_normalizado := ctrx_quarter * 5 ]
dataset[ cliente_antiguedad== 2 , ctrx_quarter_normalizado := ctrx_quarter * 2 ]
dataset[ cliente_antiguedad== 3 , ctrx_quarter_normalizado := ctrx_quarter * 1.2 ]
#variable extraida de una tesis de maestria de Irlanda
dataset[  , mpayroll_sobre_edad  := mpayroll / cliente_edad ]
#se crean los nuevos campos para MasterCard  y Visa, teniendo en cuenta los NA's
#varias formas de combinar Visa_status y Master_status
dataset[ , mv_status01 := pmax( Master_status,  Visa_status, na.rm = TRUE) ]
dataset[ , mv_status02 := Master_status +  Visa_status ]
dataset[ , mv_status03 := pmax( ifelse( is.na(Master_status), 10, Master_status) , ifelse( is.na(Visa_status), 10, Visa_status) ) ]
dataset[ , mv_status04 := ifelse( is.na(Master_status), 10, Master_status)  +  ifelse( is.na(Visa_status), 10, Visa_status)  ]
dataset[ , mv_status05 := ifelse( is.na(Master_status), 10, Master_status)  +  100*ifelse( is.na(Visa_status), 10, Visa_status)  ]
dataset[ , mv_status06 := ifelse( is.na(Visa_status),
ifelse( is.na(Master_status), 10, Master_status),
Visa_status) ]
dataset[ , mv_status07 := ifelse( is.na(Master_status),
ifelse( is.na(Visa_status), 10, Visa_status),
Master_status) ]
#combino MasterCard y Visa , teniendo en cuenta los NA
dataset[ , mv_mfinanciacion_limite  := rowSums( cbind( Master_mfinanciacion_limite,  Visa_mfinanciacion_limite) , na.rm=TRUE ) ]
dataset[ , mv_Fvencimiento          := pmin( Master_Fvencimiento, Visa_Fvencimiento, na.rm = TRUE) ]
dataset[ , mv_Finiciomora           := pmin( Master_Finiciomora, Visa_Finiciomora, na.rm = TRUE) ]
dataset[ , mv_msaldototal           := rowSums( cbind( Master_msaldototal,  Visa_msaldototal) , na.rm=TRUE ) ]
dataset[ , mv_msaldopesos           := rowSums( cbind( Master_msaldopesos,  Visa_msaldopesos) , na.rm=TRUE ) ]
dataset[ , mv_msaldodolares         := rowSums( cbind( Master_msaldodolares,  Visa_msaldodolares) , na.rm=TRUE ) ]
dataset[ , mv_mconsumospesos        := rowSums( cbind( Master_mconsumospesos,  Visa_mconsumospesos) , na.rm=TRUE ) ]
dataset[ , mv_mconsumosdolares      := rowSums( cbind( Master_mconsumosdolares,  Visa_mconsumosdolares) , na.rm=TRUE ) ]
dataset[ , mv_mlimitecompra         := rowSums( cbind( Master_mlimitecompra,  Visa_mlimitecompra) , na.rm=TRUE ) ]
dataset[ , mv_madelantopesos        := rowSums( cbind( Master_madelantopesos,  Visa_madelantopesos) , na.rm=TRUE ) ]
dataset[ , mv_madelantodolares      := rowSums( cbind( Master_madelantodolares,  Visa_madelantodolares) , na.rm=TRUE ) ]
dataset[ , mv_fultimo_cierre        := pmax( Master_fultimo_cierre, Visa_fultimo_cierre, na.rm = TRUE) ]
dataset[ , mv_mpagado               := rowSums( cbind( Master_mpagado,  Visa_mpagado) , na.rm=TRUE ) ]
dataset[ , mv_mpagospesos           := rowSums( cbind( Master_mpagospesos,  Visa_mpagospesos) , na.rm=TRUE ) ]
dataset[ , mv_mpagosdolares         := rowSums( cbind( Master_mpagosdolares,  Visa_mpagosdolares) , na.rm=TRUE ) ]
dataset[ , mv_fechaalta             := pmax( Master_fechaalta, Visa_fechaalta, na.rm = TRUE) ]
dataset[ , mv_mconsumototal         := rowSums( cbind( Master_mconsumototal,  Visa_mconsumototal) , na.rm=TRUE ) ]
dataset[ , mv_cconsumos             := rowSums( cbind( Master_cconsumos,  Visa_cconsumos) , na.rm=TRUE ) ]
dataset[ , mv_cadelantosefectivo    := rowSums( cbind( Master_cadelantosefectivo,  Visa_cadelantosefectivo) , na.rm=TRUE ) ]
dataset[ , mv_mpagominimo           := rowSums( cbind( Master_mpagominimo,  Visa_mpagominimo) , na.rm=TRUE ) ]
#a partir de aqui juego con la suma de Mastercard y Visa
dataset[ , mvr_Master_mlimitecompra := Master_mlimitecompra / mv_mlimitecompra ]
dataset[ , mvr_Visa_mlimitecompra   := Visa_mlimitecompra / mv_mlimitecompra ]
dataset[ , mvr_msaldototal          := mv_msaldototal / mv_mlimitecompra ]
dataset[ , mvr_msaldopesos          := mv_msaldopesos / mv_mlimitecompra ]
dataset[ , mvr_msaldopesos2         := mv_msaldopesos / mv_msaldototal ]
dataset[ , mvr_msaldodolares        := mv_msaldodolares / mv_mlimitecompra ]
dataset[ , mvr_msaldodolares2       := mv_msaldodolares / mv_msaldototal ]
dataset[ , mvr_mconsumospesos       := mv_mconsumospesos / mv_mlimitecompra ]
dataset[ , mvr_mconsumosdolares     := mv_mconsumosdolares / mv_mlimitecompra ]
dataset[ , mvr_madelantopesos       := mv_madelantopesos / mv_mlimitecompra ]
dataset[ , mvr_madelantodolares     := mv_madelantodolares / mv_mlimitecompra ]
dataset[ , mvr_mpagado              := mv_mpagado / mv_mlimitecompra ]
dataset[ , mvr_mpagospesos          := mv_mpagospesos / mv_mlimitecompra ]
dataset[ , mvr_mpagosdolares        := mv_mpagosdolares / mv_mlimitecompra ]
dataset[ , mvr_mconsumototal        := mv_mconsumototal  / mv_mlimitecompra ]
dataset[ , mvr_mpagominimo          := mv_mpagominimo  / mv_mlimitecompra ]
##AGRrego lo del campo nulos que comento Juan Pablo
dataset[ , campos_nulos  := rowSums( is.na(dataset) )]
##invento algunos campos mas
dataset[ , promedio_mcomisiones  := mcomisiones/cliente_antiguedad ]
#valvula de seguridad para evitar valores infinitos
#paso los infinitos a NULOS
infinitos      <- lapply( names(dataset),
function(.name) dataset[ , sum(is.infinite( get(.name) )) ]  )
infinitos_qty  <- sum( unlist( infinitos ) )
if( infinitos_qty > 0 )
{
cat( "ATENCION, hay", infinitos_qty, "valores infinitos en tu dataset. Seran pasados a NA\n" )
dataset[mapply(is.infinite, dataset)] <- NA
}
#valvula de seguridad para evitar valores NaN  que es 0/0
#paso los NaN a 0 , decision polemica si las hay
#se invita a asignar un valor razonable segun la semantica del campo creado
nans      <- lapply( names(dataset),
function(.name) dataset[ , sum( is.nan( get(.name) )) ] )
nans_qty  <- sum( unlist( nans) )
if( nans_qty > 0 )
{
cat( "ATENCION, hay", nans_qty, "valores NaN 0/0 en tu dataset. Seran pasados arbitrariamente a 0\n" )
cat( "Si no te gusta la decision, modifica a gusto el script!\n\n")
dataset[mapply(is.nan, dataset)] <- 0
}
#FIN de la seccion donde se deben hacer cambios con variables nuevas
#grabo con nombre extendido
fwrite( dataset,
file= arch_destino,
sep= "," )
}
#------------------------------------------------------------------------------
#aqui comienza el programa
#Establezco el Working Directory
#setwd( "D:\\gdrive\\ITBA2022A\\" )
#setwd("C:\\Users\\natal\\Documents\\Mineriadatos\\")
setwd("C:\\Users\\Natilux\\Documents\\_Mineriadatos\\")
#lectura de los datasets
dataset1  <- fread("./datasets/paquete_premium_202011.csv")
dataset2  <- fread("./datasets/paquete_premium_202101.csv")
#creo la carpeta donde va el experimento
# FE  representa  Feature Engineering
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/FE4020/", showWarnings = FALSE )
#setwd("D:\\gdrive\\ITBA2022A\\labo\\exp\\FE4020\\")   #Establezco el Working Directory DEL EXPERIMENTO
#setwd("C:\\Users\\natal\\Documents\\Mineriadatos\\labo\\exp\\FE4020\\")
setwd("C:\\Users\\Natilux\\Documents\\_Mineriadatos\\labo\\exp\\FE4020\\")
EnriquecerDataset( dataset1, "paquete_premium_202011_ext.csv" )
EnriquecerDataset( dataset2, "paquete_premium_202101_ext.csv" )
#Optimizacion Bayesiana de hiperparametros de  rpart
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("rlist")
require("rpart")
require("parallel")
#paquetes necesarios para la Bayesian Optimization
require("DiceKriging")
require("mlrMBO")
#Defino la  Optimizacion Bayesiana
kBO_iter  <- 100   #cantidad de iteraciones de la Optimizacion Bayesiana
hs  <- makeParamSet(
makeNumericParam("cp"       , lower= -1   , upper=    0.1),
makeIntegerParam("minsplit" , lower=  1L  , upper= 8000L),  #la letra L al final significa ENTERO
makeIntegerParam("minbucket", lower=  1L  , upper= 2000L),
makeIntegerParam("maxdepth" , lower=  3L  , upper=   20L),
forbidden = quote( minbucket > 0.5*minsplit ) )             # minbuket NO PUEDE ser mayor que la mitad de minsplit
ksemilla_azar  <- 52511   #cambiar por la primer semilla
#------------------------------------------------------------------------------
#graba a un archivo los componentes de lista
#para el primer registro, escribe antes los titulos
loguear  <- function( reg, arch=NA, folder="./work/", ext=".txt", verbose=TRUE )
{
archivo  <- arch
if( is.na(arch) )  archivo  <- paste0( folder, substitute( reg), ext )
if( !file.exists( archivo ) )  #Escribo los titulos
{
linea  <- paste0( "fecha\t",
paste( list.names(reg), collapse="\t" ), "\n" )
cat( linea, file=archivo )
}
linea  <- paste0( format(Sys.time(), "%Y%m%d %H%M%S"),  "\t",     #la fecha y hora
gsub( ", ", "\t", toString( reg ) ),  "\n" )
cat( linea, file=archivo, append=TRUE )  #grabo al archivo
if( verbose )  cat( linea )   #imprimo por pantalla
}
#------------------------------------------------------------------------------
#particionar agrega una columna llamada fold a un dataset que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
# particionar( data=dataset, division=c(1,1,1,1,1), agrupa=clase_ternaria, seed=semilla)   divide el dataset en 5 particiones
particionar  <- function( data, division, agrupa="", campo="fold", start=1, seed=NA )
{
if( !is.na( seed)  )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x ) }, division, seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
#fold_test  tiene el numero de fold que voy a usar para testear, entreno en el resto de los folds
#param tiene los hiperparametros del arbol
ArbolSimple  <- function( fold_test, data, param )
{
#genero el modelo
modelo  <- rpart("clase_ternaria ~ .",
data= data[ fold != fold_test, ],  #entreno en todo MENOS el fold_test que uso para testing
xval= 0,
control= param )
#aplico el modelo a los datos de testing
prediccion  <- predict( modelo,
data[ fold==fold_test, ],  #aplico el modelo sobre los datos de testing
type= "prob")   #quiero que me devuelva probabilidades
prob_baja2  <- prediccion[, "BAJA+2"]  #esta es la probabilidad de baja
#calculo la ganancia
ganancia_testing  <- data[ fold==fold_test ][ prob_baja2 > 1/60,
sum( ifelse( clase_ternaria=="BAJA+2", 59000, -1000 ) )]
return( ganancia_testing )  #esta es la ganancia sobre el fold de testing, NO esta normalizada
}
#------------------------------------------------------------------------------
ArbolesCrossValidation  <- function( data, param, qfolds, pagrupa, semilla )
{
divi  <- rep( 1, qfolds )  # generalmente  c(1, 1, 1, 1, 1 )  cinco unos
particionar( data, divi, seed=semilla, agrupa=pagrupa )  #particiono en dataset en folds
ganancias  <- mcmapply( ArbolSimple,
seq(qfolds), # 1 2 3 4 5
MoreArgs= list( data, param),
SIMPLIFY= FALSE,
mc.cores= 1 )   #se puede subir a qfolds si posee Linux o Mac OS
data[ , fold := NULL ]
#devuelvo la primer ganancia y el promedio
ganancia_promedio  <- mean( unlist( ganancias ) )   #promedio las ganancias
ganancia_promedio_normalizada  <- ganancia_promedio * qfolds  #aqui normalizo la ganancia
return( ganancia_promedio_normalizada )
}
#------------------------------------------------------------------------------
#esta funcion solo puede recibir los parametros que se estan optimizando
#el resto de los parametros, lamentablemente se pasan como variables globales
EstimarGanancia  <- function( x )
{
GLOBAL_iteracion  <<-  GLOBAL_iteracion + 1
xval_folds  <- 5
ganancia  <- ArbolesCrossValidation( dataset,
param= x, #los hiperparametros del arbol
qfolds= xval_folds,  #la cantidad de folds
pagrupa= "clase_ternaria",
semilla= ksemilla_azar )
#logueo
xx  <- x
xx$xval_folds  <-  xval_folds
xx$ganancia  <- ganancia
xx$iteracion <- GLOBAL_iteracion
loguear( xx,  arch= archivo_log )
return( ganancia )
}
#------------------------------------------------------------------------------
#Aqui empieza el programa
#setwd( "D:\\gdrive\\ITBA2022A\\" )
#setwd("C:\\Users\\natal\\Documents\\Mineriadatos\\")
setwd("C:\\Users\\Natilux\\Documents\\_Mineriadatos\\")
#cargo el dataset
dataset  <- fread("./labo/exp/FE4020/paquete_premium_202011_ext.csv")   #donde entreno
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/FE4020/", showWarnings = FALSE )
#setwd("D:\\gdrive\\ITBA2022A\\labo\\exp\\FE4020\\")   #Establezco el Working Directory DEL EXPERIMENTO
#setwd("C:\\Users\\natal\\Documents\\Mineriadatos\\exp\\FE4020\\")
setwd("C:\\Users\\Natilux\\Documents\\_Mineriadatos\\exp\\FE4020\\")
archivo_log  <- "FE4020_2.txt"
archivo_BO   <- "FE4020_2.RDATA"
#leo si ya existe el log, para retomar en caso que se se corte el programa
GLOBAL_iteracion  <- 0
if( file.exists(archivo_log) )
{
tabla_log  <- fread( archivo_log )
GLOBAL_iteracion  <- nrow( tabla_log )
}
#Aqui comienza la configuracion de la Bayesian Optimization
funcion_optimizar  <- EstimarGanancia
configureMlr( show.learner.output= FALSE)
#configuro la busqueda bayesiana,  los hiperparametros que se van a optimizar
#por favor, no desesperarse por lo complejo
obj.fun  <- makeSingleObjectiveFunction(
fn=       funcion_optimizar,
minimize= FALSE,   #estoy Maximizando la ganancia
noisy=    TRUE,
par.set=  hs,
has.simple.signature = FALSE
)
ctrl  <- makeMBOControl( save.on.disk.at.time= 600,  save.file.path= archivo_BO)
ctrl  <- setMBOControlTermination(ctrl, iters= kBO_iter )
ctrl  <- setMBOControlInfill(ctrl, crit= makeMBOInfillCritEI())
surr.km  <- makeLearner("regr.km", predict.type= "se", covtype= "matern3_2", control= list(trace= TRUE))
#inicio la optimizacion bayesiana
if( !file.exists( archivo_BO ) ) {
run  <- mbo(obj.fun, learner = surr.km, control = ctrl)
} else  run  <- mboContinue( archivo_BO )   #retomo en caso que ya exista
#Arbol elemental con libreria  rpart
#Debe tener instaladas las librerias  data.table  ,  rpart   y rpart.plot
#cargo las librerias que necesito
require("data.table")
require("rpart")
require("rpart.plot")
#Aqui se debe poner la carpeta de SU computadora local
#setwd("D:\\gdrive\\ITBA2022A\\")  #Establezco el Working Directory
#setwd("C:\\Users\\natal\\Documents\\Mineriadatos\\")
setwd("C:\\Users\\Natilux\\Documents\\_Mineriadatos\\")
#cargo los datos de 202011 que es donde voy a ENTRENAR el modelo
dtrain  <- fread("./labo/exp/FE4020/paquete_premium_202011_ext.csv")
#genero el modelo,  aqui se construye el arbol
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
cp=        -0.35,   #esto significa no limitar la complejidad de los splits
minsplit=  2326,     #minima cantidad de registros para que se haga el split
minbucket=  912,     #tamaño minimo de una hoja
maxdepth=   6 )    #profundidad maxima del arbol
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#Ahora aplico al modelo  a los datos de 202101  y genero la salida para kaggle
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./labo/exp/FE4020/paquete_premium_202101_ext.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
dir.create( "./labo/exp/" )
dir.create( "./labo/exp/KA2001" )
fwrite( entrega,
file= "./labo/exp/KA2001/K101_fe1.csv",
sep= "," )
# LightGBM  Motivacional
# para motivar a los alumnos a hacer la  "Tarea Hogar DOS"
# viendo que desde el inicio de la tarea logran ganancias superadoras
# la salida queda en  "./labo/exp/KA552/KA_552_001.csv"
#los DOS puntos novedosos que se ven en este script
# 1. Se entrena  con  POS = { BAJA+1, BAJA+2 }    los BAJA+1 en realidad estan mas enfermos que los BAJA+2
#    Era forzar mucho al algoritmo agrupar los BAJA¿1 con los CONTINUA
# 2. El punto anterior obliga a buscar una probabilidad de corte DISTINTA  a 1/60
# utilizar la primer semilla propia
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("lightgbm")
ksemilla  <- 52553  #poner aqui la PRIMERA de sus cinco semillas
#Aqui se debe poner la carpeta de la computadora local
#setwd("D:\\gdrive\\ITBA2022A\\")   #Establezco el Working Directory
setwd("C:\\Users\\Natilux\\Documents\\_Mineriadatos\\")
#cargo el dataset donde voy a entrenar
dataset  <- fread("./labo/exp/FE4020/paquete_premium_202011_ext.csv", stringsAsFactors= TRUE)
#paso la clase a binaria que tome valores {0,1}  enteros
#set trabaja con la clase  POS = { BAJA+1, BAJA+2 }
#esta estrategia es MUY importante
dataset[ , clase01 := ifelse( clase_ternaria %in%  c("BAJA+2","BAJA+1"), 1L, 0L) ]
#los campos que se van a utilizar
campos_buenos  <- setdiff( colnames(dataset), c("clase_ternaria","clase01") )
#dejo los datos en el formato que necesita LightGBM
dtrain  <- lgb.Dataset( data= data.matrix(  dataset[ , campos_buenos, with=FALSE]),
label= dataset$clase01 )
#genero el modelo con los parametros por default
#estos hiperparametros  salieron de una Optmizacion Bayesiana
modelo  <- lgb.train( data= dtrain,
param= list( objective=        "binary",
max_bin=              31,
learning_rate=         0.067,
num_iterations=      90,
num_leaves=          150,
min_data_in_leaf=   1900,
feature_fraction=      0.37,
seed=               ksemilla   #aqui se utiliza SU primer semilla
)
)
#aplico el modelo a los datos sin clase
dapply  <- fread("./labo/exp/FE4020/paquete_premium_202101_ext.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo,
data.matrix( dapply[, campos_buenos, with=FALSE ])                                 )
#Genero la entrega para Kaggle
#Atencion ya NO corto por  1/60,  sino que busque el punto de corte optimo
entrega  <- as.data.table( list( "numero_de_cliente"= dapply[  , numero_de_cliente],
"Predicted"= as.integer(prediccion > 0.023)   ) ) #ATENCION  no es  1/60
#guardo el resultado
#creo las carpetas
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/KA5520/", showWarnings = FALSE )
setwd( "./labo/exp/KA5520/" )
archivo_salida  <- "KA_552_003.csv"
#genero el archivo para Kaggle
fwrite( entrega,
file= archivo_salida,
sep= "," )
#ahora imprimo la importancia de variables
tb_importancia  <-  as.data.table( lgb.importance(modelo) )
archivo_importancia  <- "552_importancia_002.txt"
fwrite( tb_importancia,
file= archivo_importancia,
sep= "\t" )
#cuento cuantos 1's tiene la prediccion
#cuantos estimulos estoy enviando para retener clientes
entrega[  , sum( Predicted ) ]
