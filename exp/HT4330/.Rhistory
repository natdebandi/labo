{
#la funcion mcmapply  llama a la funcion ArbolEstimarGanancia  tantas veces como valores tenga el vector  ksemillas
ganancias  <- mcmapply( ArbolEstimarGanancia,
semillas,   #paso el vector de semillas, que debe ser el primer parametro de la funcion ArbolEstimarGanancia
MoreArgs= list( param_basicos),  #aqui paso el segundo parametro
SIMPLIFY= FALSE,
mc.cores= 1 )  #se puede subir a 5 si posee Linux o Mac OS
ganancia_promedio  <- mean( unlist(ganancias) )
return( ganancia_promedio )
}
setwd("C:\\Users\\natal\\Documents\\Mineriadatos\\")
#Aqui se debe poner la carpeta de la computadora local
#setwd("D:\\gdrive\\ITBA2022A\\")   #Establezco el Working Directory
setwd("C:\\Users\\Natilux\\Documents\\_Mineriadatos\\")
#cargo los datos
dataset  <- fread("./datasets/paquete_premium_202011.csv")
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/HT2020/", showWarnings = FALSE )
archivo_salida  <- "./labo/exp/HT2020/nd_rpart001.txt"
#Escribo los titulos al archivo donde van a quedar los resultados
#atencion que si ya existe el archivo, esta instruccion LO SOBREESCRIBE, y lo que estaba antes se pierde
#la forma que no suceda lo anterior es con append=TRUE
cat( file=archivo_salida,
sep= "",
"max_depth", "\t",
"min_split", "\t",
"vmin_bucket", "\t",
"ganancia_promedio", "\n")
vcp<- -1
vmax_depth<-6
vmin_bucket<-350
vmin_split <-900
#notar como se agrega
param_basicos  <- list( "cp"=         vcp,       #complejidad minima
"minsplit"=  vmin_split,  #minima cantidad de registros en un nodo para hacer el split
"minbucket"=  vmin_bucket, #minima cantidad de registros en una hoja
"maxdepth"=  vmax_depth ) #profundidad máxima del arbol
#Un solo llamado, con la semilla 17
ganancia_promedio  <- ArbolesMontecarlo( ksemillas,  param_basicos )
#escribo los resultados al archivo de salida
cat(  file=archivo_salida,
append= TRUE,
sep= "",
vmax_depth, "\t",
vmin_bucket, "\t",
vmin_split, "\t",
ganancia_promedio, "\n"  )
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
#cargo las librerias que necesito
require("data.table")
require("rpart")
require("rpart.plot")
#Aqui debe cambiar los parametros por los que desea probar
param_basicos  <- list( "cp"=          -0.1,  #complejidad minima
"minsplit"=   900,     #minima cantidad de registros en un nodo para hacer el split
"minbucket"=  350,     #minima cantidad de registros en una hoja
"maxdepth"=     6 )    #profundidad máxima del arbol
#Aqui se debe poner la carpeta de SU computadora local
#setwd("D:\\gdrive\\ITBA2022A\\")  #Establezco el Working Directory
#seteo dos tipos de drive porque depende de la compu donde este
#setwd("C:\\Users\\natal\\Documents\\Mineriadatos\\")
setwd("C:\\Users\\Natilux\\Documents\\_Mineriadatos\\")
#cargo los datos de 202011 que es donde voy a ENTRENAR el modelo
dtrain  <- fread("./datasets/paquete_premium_202011.csv")
#genero el modelo,  aqui se construye el arbol
modelo  <- rpart("clase_ternaria ~ .",  #quiero predecir clase_ternaria a partir de el resto de las variables
data = dtrain,
xval=0,
control=  param_basicos )
#grafico el arbol
prp(modelo, extra=101, digits=5, branch=1, type=4, varlen=0, faclen=0)
#Ahora aplico al modelo  a los datos de 202101  y genero la salida para kaggle
#cargo los datos de 202011, que es donde voy a APLICAR el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo, dapply , type = "prob")
#prediccion es una matriz con TRES columnas, llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
#cada columna es el vector de probabilidades
#agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[ , prob_baja2 := prediccion[, "BAJA+2"] ]
#solo le envio estimulo a los registros con probabilidad de BAJA+2 mayor  a  1/60
dapply[ , Predicted  := as.numeric(prob_baja2 > 1/60) ]
#genero un dataset con las dos columnas que me interesan
entrega  <- dapply[   , list(numero_de_cliente, Predicted) ] #genero la salida
#genero el archivo para Kaggle
#creo la carpeta donde va el experimento
dir.create( "./labo/exp/", showWarnings = FALSE  )
dir.create( "./labo/exp/KA2022/", showWarnings = FALSE  )
fwrite( entrega,
file= "./labo/exp/KA2022_nd/nd_rpart001.csv",
sep= "," )
fwrite( entrega,
file= "./labo/exp/KA2022_nd/nd_rpart001.csv",
sep= "," )
dir.create( "./labo/exp/KA2022_nd/", showWarnings = FALSE  )
fwrite( entrega,
file= "./labo/exp/KA2022_nd/nd_rpart001.csv",
sep= "," )
#Se utiliza el algoritmo Random Forest, creado por Leo Breiman en el año 2001
#Una libreria que implementa Rando Forest se llama  ranger
#La libreria esta implementada en lenguaje C y corre en paralelo, utiliza TODOS los nucleos del procesador
#Leo Breiman provenia de la estadistica y tenia "horror a los nulos", con lo cual el algoritmo necesita imputar nulos antes
#limpio la memoria
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("ranger")
require("randomForest")  #solo se usa para imputar nulos
#Aqui se debe poner la carpeta de la computadora local
#setwd("D:\\gdrive\\ITBA2022A\\")   #Establezco el Working Directory
#setwd("C:\\Users\\natal\\Documents\\Mineriadatos\\")
setwd("C:\\Users\\Natilux\\Documents\\_Mineriadatos\\")
#cargo los datos donde entreno
dtrain  <- fread("./datasets/paquete_premium_202011.csv", stringsAsFactors= TRUE)
#imputo los nulos, ya que ranger no acepta nulos
#Leo Breiman, ¿por que le temias a los nulos?
dtrain  <- na.roughfix( dtrain )
#cargo los datos donde aplico el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv", stringsAsFactors= TRUE)
dapply[ , clase_ternaria := NULL ]  #Elimino esta columna que esta toda en NA
dapply  <- na.roughfix( dapply )  #tambien imputo los nulos en los datos donde voy a aplicar el modelo
#genero el modelo de Random Forest con la libreria ranger
#notar como la suma de muchos arboles contrarresta el efecto de min.node.size=1
param  <- list( "num.trees"=       450,  #cantidad de arboles
"mtry"=             15,  #cantidad de variables que evalua para hacer un split  sqrt(ncol(dtrain))
"min.node.size"=  1500,  #tamaño minimo de las hojas
"max.depth"=        16   # 0 significa profundidad infinita
)
set.seed(52511) #Establezco la semilla aleatoria
#para preparar la posibilidad de asignar pesos a las clases
#la teoria de  Maite San Martin
setorder( dtrain, clase_ternaria )  #primero quedan los BAJA+1, BAJA+2, CONTINUA
#genero el modelo de Random Forest llamando a ranger()
modelo  <- ranger( formula= "clase_ternaria ~ .",
data=  dtrain,
probability=   TRUE,  #para que devuelva las probabilidades
num.trees=     param$num.trees,
mtry=          param$mtry,
min.node.size= param$min.node.size,
max.depth=     param$max.depth
#,class.weights= c( 1,60, 1)  #siguiendo con la idea de Maite San Martin
)
#aplico el modelo recien creado a los datos del futuro
prediccion  <- predict( modelo, dapply )
#Genero la entrega para Kaggle
entrega  <- as.data.table( list( "numero_de_cliente"= dapply[  , numero_de_cliente],
"Predicted"= as.numeric(prediccion$predictions[ ,"BAJA+2" ] > 1/60) ) ) #genero la salida
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/KA2411/", showWarnings = FALSE )
archivo_salida  <- "./labo/exp/KA2411/KA_411_002.csv"
#genero el archivo para Kaggle
fwrite( entrega,
file= archivo_salida,
sep="," )
#Se utiliza el algoritmo Random Forest, creado por Leo Breiman en el año 2001
#Una libreria que implementa Rando Forest se llama  ranger
#La libreria esta implementada en lenguaje C y corre en paralelo, utiliza TODOS los nucleos del procesador
#Leo Breiman provenia de la estadistica y tenia "horror a los nulos", con lo cual el algoritmo necesita imputar nulos antes
#limpio la memoria
rm( list=ls() )  #Borro todos los objetos
gc()   #Garbage Collection
require("data.table")
require("ranger")
require("randomForest")  #solo se usa para imputar nulos
#Aqui se debe poner la carpeta de la computadora local
#setwd("D:\\gdrive\\ITBA2022A\\")   #Establezco el Working Directory
#setwd("C:\\Users\\natal\\Documents\\Mineriadatos\\")
setwd("C:\\Users\\Natilux\\Documents\\_Mineriadatos\\")
#cargo los datos donde entreno
dtrain  <- fread("./datasets/paquete_premium_202011.csv", stringsAsFactors= TRUE)
#imputo los nulos, ya que ranger no acepta nulos
#Leo Breiman, ¿por que le temias a los nulos?
dtrain  <- na.roughfix( dtrain )
#cargo los datos donde aplico el modelo
dapply  <- fread("./datasets/paquete_premium_202101.csv", stringsAsFactors= TRUE)
dapply[ , clase_ternaria := NULL ]  #Elimino esta columna que esta toda en NA
dapply  <- na.roughfix( dapply )  #tambien imputo los nulos en los datos donde voy a aplicar el modelo
#genero el modelo de Random Forest con la libreria ranger
#notar como la suma de muchos arboles contrarresta el efecto de min.node.size=1
param  <- list( "num.trees"=       500,  #cantidad de arboles
"mtry"=             35,  #cantidad de variables que evalua para hacer un split  sqrt(ncol(dtrain))
"min.node.size"=  1800,  #tamaño minimo de las hojas
"max.depth"=        12   # 0 significa profundidad infinita
)
set.seed(52511) #Establezco la semilla aleatoria
#para preparar la posibilidad de asignar pesos a las clases
#la teoria de  Maite San Martin
setorder( dtrain, clase_ternaria )  #primero quedan los BAJA+1, BAJA+2, CONTINUA
#genero el modelo de Random Forest llamando a ranger()
modelo  <- ranger( formula= "clase_ternaria ~ .",
data=  dtrain,
probability=   TRUE,  #para que devuelva las probabilidades
num.trees=     param$num.trees,
mtry=          param$mtry,
min.node.size= param$min.node.size,
max.depth=     param$max.depth
#,class.weights= c( 1,60, 1)  #siguiendo con la idea de Maite San Martin
)
#aplico el modelo recien creado a los datos del futuro
prediccion  <- predict( modelo, dapply )
#Genero la entrega para Kaggle
entrega  <- as.data.table( list( "numero_de_cliente"= dapply[  , numero_de_cliente],
"Predicted"= as.numeric(prediccion$predictions[ ,"BAJA+2" ] > 1/60) ) ) #genero la salida
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/KA2411/", showWarnings = FALSE )
archivo_salida  <- "./labo/exp/KA2411/KA_411_003.csv"
#genero el archivo para Kaggle
fwrite( entrega,
file= archivo_salida,
sep="," )
# LightGBM  Motivacional
# para motivar a los alumnos a hacer la  "Tarea Hogar DOS"
# viendo que desde el inicio de la tarea logran ganancias superadoras
# la salida queda en  "./labo/exp/KA552/KA_552_001.csv"
#los DOS puntos novedosos que se ven en este script
# 1. Se entrena  con  POS = { BAJA+1, BAJA+2 }    los BAJA+1 en realidad estan mas enfermos que los BAJA+2
#    Era forzar mucho al algoritmo agrupar los BAJA¿1 con los CONTINUA
# 2. El punto anterior obliga a buscar una probabilidad de corte DISTINTA  a 1/60
# utilizar la primer semilla propia
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("lightgbm")
ksemilla  <- 52553  #poner aqui la PRIMERA de sus cinco semillas
#Aqui se debe poner la carpeta de la computadora local
#setwd("D:\\gdrive\\ITBA2022A\\")   #Establezco el Working Directory
setwd("C:\\Users\\Natilux\\Documents\\_Mineriadatos\\")
#cargo el dataset donde voy a entrenar
dataset  <- fread("./datasets/paquete_premium_202011.csv", stringsAsFactors= TRUE)
#paso la clase a binaria que tome valores {0,1}  enteros
#set trabaja con la clase  POS = { BAJA+1, BAJA+2 }
#esta estrategia es MUY importante
dataset[ , clase01 := ifelse( clase_ternaria %in%  c("BAJA+2","BAJA+1"), 1L, 0L) ]
#los campos que se van a utilizar
campos_buenos  <- setdiff( colnames(dataset), c("clase_ternaria","clase01") )
#dejo los datos en el formato que necesita LightGBM
dtrain  <- lgb.Dataset( data= data.matrix(  dataset[ , campos_buenos, with=FALSE]),
label= dataset$clase01 )
#genero el modelo con los parametros por default
#estos hiperparametros  salieron de una Optmizacion Bayesiana
modelo  <- lgb.train( data= dtrain,
param= list( objective=        "binary",
max_bin=              31,
learning_rate=         0.067,
num_iterations=      128,
num_leaves=          100,
min_data_in_leaf=   1700,
feature_fraction=      0.37,
seed=               ksemilla   #aqui se utiliza SU primer semilla
)
)
#aplico el modelo a los datos sin clase
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo,
data.matrix( dapply[, campos_buenos, with=FALSE ])                                 )
#Genero la entrega para Kaggle
#Atencion ya NO corto por  1/60,  sino que busque el punto de corte optimo
entrega  <- as.data.table( list( "numero_de_cliente"= dapply[  , numero_de_cliente],
"Predicted"= as.integer(prediccion > 0.023)   ) ) #ATENCION  no es  1/60
#guardo el resultado
#creo las carpetas
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/KA5520/", showWarnings = FALSE )
setwd( "./labo/exp/KA5520/" )
archivo_salida  <- "KA_552_001.csv"
#genero el archivo para Kaggle
fwrite( entrega,
file= archivo_salida,
sep= "," )
#ahora imprimo la importancia de variables
tb_importancia  <-  as.data.table( lgb.importance(modelo) )
archivo_importancia  <- "552_importancia_001.txt"
fwrite( tb_importancia,
file= archivo_importancia,
sep= "\t" )
#cuento cuantos 1's tiene la prediccion
#cuantos estimulos estoy enviando para retener clientes
entrega[  , sum( Predicted ) ]
# LightGBM  Motivacional
# para motivar a los alumnos a hacer la  "Tarea Hogar DOS"
# viendo que desde el inicio de la tarea logran ganancias superadoras
# la salida queda en  "./labo/exp/KA552/KA_552_001.csv"
#los DOS puntos novedosos que se ven en este script
# 1. Se entrena  con  POS = { BAJA+1, BAJA+2 }    los BAJA+1 en realidad estan mas enfermos que los BAJA+2
#    Era forzar mucho al algoritmo agrupar los BAJA¿1 con los CONTINUA
# 2. El punto anterior obliga a buscar una probabilidad de corte DISTINTA  a 1/60
# utilizar la primer semilla propia
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("lightgbm")
ksemilla  <- 52553  #poner aqui la PRIMERA de sus cinco semillas
#Aqui se debe poner la carpeta de la computadora local
#setwd("D:\\gdrive\\ITBA2022A\\")   #Establezco el Working Directory
setwd("C:\\Users\\Natilux\\Documents\\_Mineriadatos\\")
#cargo el dataset donde voy a entrenar
dataset  <- fread("./datasets/paquete_premium_202011.csv", stringsAsFactors= TRUE)
#paso la clase a binaria que tome valores {0,1}  enteros
#set trabaja con la clase  POS = { BAJA+1, BAJA+2 }
#esta estrategia es MUY importante
dataset[ , clase01 := ifelse( clase_ternaria %in%  c("BAJA+2","BAJA+1"), 1L, 0L) ]
#los campos que se van a utilizar
campos_buenos  <- setdiff( colnames(dataset), c("clase_ternaria","clase01") )
#dejo los datos en el formato que necesita LightGBM
dtrain  <- lgb.Dataset( data= data.matrix(  dataset[ , campos_buenos, with=FALSE]),
label= dataset$clase01 )
#genero el modelo con los parametros por default
#estos hiperparametros  salieron de una Optmizacion Bayesiana
modelo  <- lgb.train( data= dtrain,
param= list( objective=        "binary",
max_bin=              31,
learning_rate=         0.067,
num_iterations=      90,
num_leaves=          150,
min_data_in_leaf=   1900,
feature_fraction=      0.37,
seed=               ksemilla   #aqui se utiliza SU primer semilla
)
)
#aplico el modelo a los datos sin clase
dapply  <- fread("./datasets/paquete_premium_202101.csv")
#aplico el modelo a los datos nuevos
prediccion  <- predict( modelo,
data.matrix( dapply[, campos_buenos, with=FALSE ])                                 )
#Genero la entrega para Kaggle
#Atencion ya NO corto por  1/60,  sino que busque el punto de corte optimo
entrega  <- as.data.table( list( "numero_de_cliente"= dapply[  , numero_de_cliente],
"Predicted"= as.integer(prediccion > 0.023)   ) ) #ATENCION  no es  1/60
#guardo el resultado
#creo las carpetas
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/KA5520/", showWarnings = FALSE )
setwd( "./labo/exp/KA5520/" )
archivo_salida  <- "KA_552_002.csv"
#genero el archivo para Kaggle
fwrite( entrega,
file= archivo_salida,
sep= "," )
#ahora imprimo la importancia de variables
tb_importancia  <-  as.data.table( lgb.importance(modelo) )
archivo_importancia  <- "552_importancia_002.txt"
fwrite( tb_importancia,
file= archivo_importancia,
sep= "\t" )
#cuento cuantos 1's tiene la prediccion
#cuantos estimulos estoy enviando para retener clientes
entrega[  , sum( Predicted ) ]
#Optimizacion Bayesiana de hiperparametros de  ranger  (Random Forest)
#limpio la memoria
rm( list=ls() )  #remove all objects
gc()             #garbage collection
require("data.table")
require("rlist")
require("yaml")
require("ranger")
require("randomForest")  #solo se usa para imputar nulos
require("parallel")
#paquetes necesarios para la Bayesian Optimization
require("DiceKriging")
require("mlrMBO")
kBO_iter  <- 100   #cantidad de iteraciones de la Optimizacion Bayesiana
#Estructura que define los hiperparámetros y sus rangos
hs  <- makeParamSet(
makeIntegerParam("num.trees" ,        lower=  100L, upper= 2500L),  #la letra L al final significa ENTERO
makeIntegerParam("max.depth",         lower=    1L, upper=   30L),  # 0 significa profundidad infinita
makeIntegerParam("min.node.size" ,    lower=    1L, upper=  500L),
makeIntegerParam("mtry" ,             lower=    2L, upper=   50L))
ksemilla_azar  <- 52553  #Aqui poner la propia semilla
#------------------------------------------------------------------------------
#graba a un archivo los componentes de lista
#para el primer registro, escribe antes los titulos
loguear  <- function( reg, arch=NA, folder="./work/", ext=".txt", verbose=TRUE )
{
archivo  <- arch
if( is.na(arch) )  archivo  <- paste0(  folder, substitute( reg ), ext )
if( !file.exists( archivo ) )  #Escribo los titulos
{
linea  <- paste0( "fecha\t",
paste( list.names(reg), collapse="\t" ), "\n" )
cat( linea, file= archivo )
}
linea  <- paste0( format(Sys.time(), "%Y%m%d %H%M%S"),  "\t",     #la fecha y hora
gsub( ", ", "\t", toString( reg ) ),  "\n" )
cat( linea, file= archivo, append= TRUE )  #grabo al archivo
if( verbose )  cat( linea )   #imprimo por pantalla
}
#------------------------------------------------------------------------------
#particionar agrega una columna llamada fold a un dataset que consiste en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)   crea una particion 70, 30
# particionar( data=dataset, division=c(1,1,1,1,1), agrupa=clase_ternaria, seed=semilla)   divide el dataset en 5 particiones
particionar  <- function( data, division, agrupa="", campo="fold", start=1, seed=NA )
{
if( !is.na( seed)  )   set.seed( seed )
bloque  <- unlist( mapply(  function(x,y) { rep( y, x ) }, division, seq( from=start, length.out=length(division) )  ) )
data[ , (campo) :=  sample( rep( bloque, ceiling(.N/length(bloque))) )[1:.N],
by= agrupa ]
}
#------------------------------------------------------------------------------
ranger_Simple  <- function( fold_test, pdata, param )
{
#genero el modelo
set.seed(ksemilla_azar)
modelo  <- ranger( formula= "clase_binaria ~ .",
data=  pdata[ fold!= fold_test],
probability=   TRUE,  #para que devuelva las probabilidades
num.trees=     param$num.trees,
mtry=          param$mtry,
min.node.size= param$min.node.size,
max.depth=     param$max.depth
)
prediccion  <- predict( modelo, pdata[ fold == fold_test] )
ganancia_testing  <- pdata[ fold==fold_test,
sum( (prediccion$predictions[ ,"POS" ] > 1/60) *
ifelse( clase_binaria=="POS", 59000, -1000)  ) ]
return( ganancia_testing )
}
#------------------------------------------------------------------------------
ranger_CrossValidation  <- function( data, param, pcampos_buenos, qfolds, pagrupa, semilla )
{
divi  <- rep( 1, qfolds )
particionar( data, divi, seed=semilla, agrupa=pagrupa )
ganancias  <- mcmapply( ranger_Simple,
seq(qfolds), # 1 2 3 4 5
MoreArgs= list( data, param),
SIMPLIFY= FALSE,
mc.cores= 1 )   #dejar esto en  1, porque ranger ya corre en paralelo
data[ , fold := NULL ]   #elimino el campo fold
#devuelvo la ganancia promedio normalizada
ganancia_promedio  <- mean( unlist( ganancias ) )
ganancia_promedio_normalizada  <- ganancia_promedio * qfolds
return( ganancia_promedio_normalizada )
}
#------------------------------------------------------------------------------
#esta funcion solo puede recibir los parametros que se estan optimizando
#el resto de los parametros se pasan como variables globales
EstimarGanancia_ranger  <- function( x )
{
GLOBAL_iteracion  <<- GLOBAL_iteracion + 1
xval_folds  <- 5   # 5-fold cross validation
ganancia  <- ranger_CrossValidation( dataset,
param= x,
qfolds= xval_folds,
pagrupa= "clase_binaria",
semilla= ksemilla_azar )
#logueo
xx  <- x
xx$xval_folds  <-  xval_folds
xx$ganancia  <- ganancia
xx$iteracion  <- GLOBAL_iteracion
loguear( xx, arch= klog )
return( ganancia )
}
#------------------------------------------------------------------------------
#Aqui comienza el programa
#Aqui se debe poner la carpeta de la computadora local
#setwd("D:\\gdrive\\ITBA2022A\\")   #Establezco el Working Directory
setwd("C:\\Users\\Natilux\\Documents\\_Mineriadatos\\")
#cargo el dataset donde voy a entrenar el modelo
dataset  <- fread("./datasets/paquete_premium_202011.csv", stringsAsFactors= TRUE)   #donde entreno
#creo la carpeta donde va el experimento
# HT  representa  Hiperparameter Tuning
dir.create( "./labo/exp/",  showWarnings = FALSE )
dir.create( "./labo/exp/HT4330/", showWarnings = FALSE )
#setwd("D:\\gdrive\\ITBA2022A\\labo\\exp\\HT4330\\")   #Establezco el Working Directory DEL EXPERIMENTO
setwd("C:\\Users\\Natilux\\Documents\\_Mineriadatos\\labo\\exp\\HT4330\\")
#en estos archivos quedan los resultados
kbayesiana  <- "HT433.RDATA"
klog        <- "HT433.txt"
GLOBAL_iteracion  <- 0   #inicializo la variable global
#si ya existe el archivo log, traigo hasta donde llegue
if( file.exists(klog) )
{
tabla_log  <- fread( klog )
GLOBAL_iteracion  <- nrow( tabla_log )
}
#paso a trabajar con clase binaria POS={BAJA+2}   NEG={BAJA+1, CONTINUA}
dataset[ , clase_binaria := as.factor(ifelse( clase_ternaria=="BAJA+2", "POS", "NEG" )) ]
dataset[ , clase_ternaria := NULL ]  #elimino la clase_ternaria, ya no la necesito
#imputo los nulos, ya que ranger no acepta nulos
#Leo Breiman, ¿por que le temias a los nulos?
dataset  <- na.roughfix( dataset )
#Aqui comienza la configuracion de la Bayesian Optimization
configureMlr( show.learner.output = FALSE)
funcion_optimizar  <- EstimarGanancia_ranger
#configuro la busqueda bayesiana,  los hiperparametros que se van a optimizar
#por favor, no desesperarse por lo complejo
obj.fun  <- makeSingleObjectiveFunction(
fn=       funcion_optimizar,
minimize= FALSE,   #estoy Maximizando la ganancia
noisy=    TRUE,
par.set=  hs,
has.simple.signature = FALSE
)
ctrl  <- makeMBOControl( save.on.disk.at.time= 600,  save.file.path= kbayesiana)
ctrl  <- setMBOControlTermination(ctrl, iters= kBO_iter )
ctrl  <- setMBOControlInfill(ctrl, crit= makeMBOInfillCritEI())
surr.km  <-  makeLearner("regr.km", predict.type= "se", covtype= "matern3_2", control= list(trace= TRUE))
#inicio la optimizacion bayesiana
if(!file.exists(kbayesiana)) {
run  <- mbo(obj.fun, learner = surr.km, control = ctrl)
} else  run  <- mboContinue( kbayesiana )   #retomo en caso que ya exista
